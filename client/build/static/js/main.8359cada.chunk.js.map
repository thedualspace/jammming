{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","util/Spotify.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","event","onNameChange","onSave","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","searchTerm","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","playlistName","playlistTrackUris","length","userId","method","body","JSON","stringify","playlistId","console","log","uris","App","playlistTracks","updatePlaylistName","trackToBeRemoved","filteredArray","filter","newName","trackUris","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8359cada.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css'\n\nexport class SearchBar extends React.Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      term: ''\n    }\n    \n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n  \n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(e) {\n    this.setState({term: e.target.value});\n  }\n  \n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song, Album, or Artist\" \n          onChange={this.handleTermChange} \n        />\n        <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\n      </div>      \n    )\n  }\n};","import React from 'react';\nimport './Track.css';\n\nexport class Track extends React.Component{\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track)\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track)\n  }\n  \n  renderAction(){\n    if (this.props.isRemoval) {\n      return (\n        <button onClick={this.removeTrack} className='Track-action'>-</button>\n      )\n    } else {\n      return (\n        <button onClick={this.addTrack} className='Track-action'>+</button>\n      )\n    } \n  }\n  \n  render() {\n    return(\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    )\n  }\n}\n\n","import React from 'react';\nimport {Track} from '../Track/Track';\nimport './TrackList.css';\n\nexport class TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map( track => {\n            return <Track \n              onAdd={this.props.onAdd}\n              onRemove={this.props.onRemove} \n              track={track} \n              key={track.id}\n              isRemoval={this.props.isRemoval} />\n          })\n        } \n      </div>\n    )\n  }\n}\n\n","import React from 'react';\nimport {TrackList} from '../TrackList/TrackList'\nimport './SearchResults.css';\n\nexport class SearchResults extends React.Component {\n  render() { \n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n         <TrackList \n          isRemoval={false} \n          tracks={this.props.searchResults} \n          onAdd={this.props.onAdd} />\n      </div>\n    )\n  }\n}\n\n","import React from 'react';\nimport {TrackList} from '../TrackList/TrackList';\nimport './Playlist.css';\n\nexport class Playlist extends React.Component{\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  \n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value)\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} value={this.props.name}/>\n        <TrackList isRemoval={true} tracks={this.props.tracks} onRemove={this.props.onRemove} />\n        <button onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\n      </div>\n    )\n  }\n}\n\n","const clientID = '8a2d5d0a7a234d4eb040dc7647ec5806';\r\nconst redirectURI = 'http://thedualspace.surge.sh/';\r\nlet accessToken = '';\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    } \r\n    \r\n    //Why do we use window.location and not a fetch promise?\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    //Why are the matches returning arrays? Why is the match not at index 0?\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n\r\n      //Upon receipt of the token, set it to expire after expiresIn seconds\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000); //Timeout is in milliseconds by default\r\n      window.history.pushState('Access Token', null, '/'); //Gonna be honest, I just used the hint here. No clue.\r\n      return accessToken;\r\n    } else {\r\n      const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n      window.location = accessURL;\r\n    }\r\n  },\r\n\r\n  search(searchTerm) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    \r\n    return fetch(`https://api.spotify.com/v1/search?q=${searchTerm}&type=track`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if(jsonResponse.tracks) {\r\n        return jsonResponse.tracks.items.map(track => {\r\n          return {\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            id : track.id,\r\n            uri: track.uri\r\n          }\r\n        })\r\n      } else {\r\n        return [];\r\n      }\r\n    })\r\n\r\n  },\r\n\r\n  async savePlaylist(playlistName, playlistTrackUris) {\r\n    if(!playlistName || !playlistTrackUris.length) {\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = {Authorization: `Bearer ${accessToken}`}\r\n    let userId;\r\n\r\n    return fetch(`https://api.spotify.com/v1/me`, {headers: headers}\r\n    ).then(response =>  response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({name: playlistName}),\r\n        headers: headers\r\n    }).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      const playlistId = jsonResponse.id;\r\n      console.log(jsonResponse)\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({uris: playlistTrackUris}),\r\n        headers: headers\r\n      })\r\n    })\r\n    })\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n\r\n\r\n\r\n","import React from 'react';\nimport {SearchBar} from '../SearchBar/SearchBar';\nimport {SearchResults} from '../SearchResults/SearchResults';\nimport {Playlist} from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n\n      playlistName: 'New Playlist',\n\n      playlistTracks: []\n    };\n\n    this.search = this.search.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n  }\n\n  search(searchTerm) {\n    Spotify.search(searchTerm).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  //Using ES6 array concatenation we can add a new track to the playlistTracks array. Very clean! \n  addTrack(track) {\n    this.setState(\n       {playlistTracks: [...this.state.playlistTracks, track] } \n    )\n  }\n\n  //When called, removes trackToBeRemoved from playlistTracks by filtering for all tracks which don't match trackToBeRemoved's id.\n  removeTrack(trackToBeRemoved) {\n    const filteredArray = this.state.playlistTracks.filter( track => {\n      return track.id !== trackToBeRemoved.id;\n    })\n    this.setState(\n       {playlistTracks: filteredArray } \n    )\n  }\n\n  updatePlaylistName(newName) {\n    this.setState({playlistName: newName})\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map( track => track.uri );\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults \n              searchResults={this.state.searchResults} \n              onAdd={this.addTrack} \n            />\n            \n            <Playlist \n              name={this.state.playlistName} \n              tracks={this.state.playlistTracks} \n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist} \n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}